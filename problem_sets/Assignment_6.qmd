---
title: "Assignment_6"
format: gfm
editor: visual
---

```{r, waring=FALSE, message=FALSE}
library(tidyverse)
library(knitr)
```

## Exercise 1. Tibble and Data Import

Import the data frames listed below into R and [parse](https://r4ds.had.co.nz/data-import.html#parsing-a-vector) the columns appropriately when needed. Watch out for the formatting oddities of each dataset. Print the results directly, **without** using `kable()`.

**You only need to finish any three out of the five questions in this exercise in order to get credit.**

#### 1.1 Create the following tibble manually, first using `tribble()` and then using `tibble()`. Print both results. \[We didn’t have time to cover this in class, but look up how these functions work [here](https://r4ds.had.co.nz/tibbles.html#creating-tibbles)\]

`tribble()`:

```{r, waring=FALSE, message=FALSE}
tribble(
  ~a, ~b, ~c,
  1, 2.1, "apple", 
  2, 3.2, "orange" )
```

`tibble()`:

```{r, waring=FALSE, message=FALSE}
tibble(
  a = 1:2,
  b = a + c(1.1, 1.2),
  c = c("apple", "orange")
  )
```

#### 1.2 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt` into R. Change the column names into “Name”, “Weight”, “Price”.

```{r message=FALSE, waring=FALSE}
data1 <- read.csv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt", header = FALSE)

colnames(data1) <- c("Name", "Weight", "Price")
```

#### 1.3 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt` into R. Watch out for the first few lines, missing values, separators, quotation marks, and deliminaters.

```{r, waring=FALSE, message=FALSE}
data2 <- read.csv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt", quote = "/", skip = 2, na = c("Not Available", "?"), header = TRUE, sep = ";")
```

## Exercise 2. Weather station

This dataset contains the weather and air quality data collected by a weather station in Taiwan. It was obtained from the Environmental Protection Administration, Executive Yuan, R.O.C. (Taiwan).

#### 2.1 Variable descriptions

-   The text file `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt` contains descriptions of different variables collected by the station.

-   Import it into R and print it in a table as shown below with `kable()`.

```{r, waring=FALSE, message=FALSE}
weather_Taiwan <- read.csv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt", header = TRUE, sep = "-")

kable(weather_Taiwan)
```

`#` indicates invalid value by equipment inspection\
`*` indicates invalid value by program inspection\
`x` indicates invalid value by human inspection\
`NR` indicates no rainfall\
blank indicates no data

#### 2.2 Data tidying

-   Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv` into R. As you can see, this dataset is a classic example of untidy data: values of a variable (i.e. hour of the day) are stored as column names; variable names are stored in the `item` column.

-   Clean this dataset up and restructure it into a tidy format.

-   Parse the `date` variable into date format and parse `hour` into time.

-   Turn all invalid values into `NA` and turn `NR` in rainfall into `0`.

-   Parse all values into numbers.

-   Show the first 6 rows and 10 columns of this cleaned dataset, as shown below, *without* using `kable()`.

*Hints: you don’t have to perform these tasks in the given order; also, warning messages are not necessarily signs of trouble.*


Before cleaning:
```{r, waring=FALSE, message=FALSE}
weather_Taiwan2 <- read_csv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv", col_names = TRUE, col_types = cols(.default = "c"))

weather_Taiwan2 |> 
  select(1:10) |> 
  head()
```         


After cleaning:
```{r}
#| warning: false
weather_Taiwan2_cleaned <- weather_Taiwan2 |>
  pivot_longer(cols = '00':'23', names_to = "hour", values_to = "value") |>
  pivot_wider(names_from = item, values_from = value) |>
  mutate(RAINFALL = ifelse(RAINFALL == "NR", "0", RAINFALL)) |>
  mutate(date = as.Date(date),
    across(AMB_TEMP:PM10, as.numeric),
    hour = hms::as_hms(paste0(hour, ":00:00")))

weather_Taiwan2_cleaned |> 
  select(1:10) |> 
  head()
```         

#### 2.3 Using this cleaned dataset, plot the daily variation in ambient temperature on September 25, 2015, as shown below.

```{r, waring=FALSE, message=FALSE}
weather_Taiwan2_cleaned |> 
  filter(date == "2015-09-25") |> 
  ggplot(aes(x = hour, y = AMB_TEMP)) + 
  geom_line()
```

#### 2.4 Plot the daily average ambient temperature throughout the year with a **continuous line**, as shown below.

```{r, waring=FALSE, message=FALSE}

weather_Taiwan2_cleaned |> 
  group_by(date) |> 
  summarize(daily_average_ambient_temp = mean(AMB_TEMP)) |> 
  ggplot(aes(x = date, y = daily_average_ambient_temp)) +
  geom_line()
```

#### 2.5 Plot the total rainfall per month in a bar chart, as shown below.

*Hint: separating date into three columns might be helpful.*

```{r}
#| warning: false
weather_Taiwan2_cleaned |> 
  mutate(year = format(date, "%Y"), month = format(date, "%m"), day = format(date, "%d"), RAINFALL = as.numeric(RAINFALL)) |> 
  group_by(month) |> 
  summarise(MonthlyRainfall = sum(RAINFALL, na.rm = TRUE)) |> 
  ggplot(aes(x = month, y = MonthlyRainfall)) + 
  geom_col()

```

#### 2.6 Plot the per hour variation in PM2.5 in the first week of September with a **continuous line**, as shown below.

*Hint: uniting the date and hour and parsing the new variable might be helpful.*

```{r, waring=FALSE, message=FALSE}
weather_Taiwan2_cleaned |> 
  filter(format(date, "%m") == "09", format(date, "%d") <= "07") |> 
  mutate(time_str = paste(date, hour), PM2.5 = as.numeric(PM2.5)) |> 
  mutate(time = parse_datetime(time_str, format = "%Y-%m-%d %H:%M:%S")) |> 
  ggplot(aes(x = time, y = PM2.5)) +
  geom_line()

```
